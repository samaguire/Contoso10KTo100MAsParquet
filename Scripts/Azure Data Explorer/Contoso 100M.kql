// Contoso 100M
.execute database script <|
.drop tables (Data_CurrencyExchange, Data_Customer, Data_Date, Data_GeoLocations, Data_OrderRows, Data_Orders, Data_Product, Data_Store) ifexists
.create tables
        Data_CurrencyExchange (Date: datetime, FromCurrency: string, ToCurrency: string, Exchange: real),
        Data_Customer (CustomerKey: int, Gender: string, Title: string, GivenName: string, MiddleInitial: string, Surname: string, StreetAddress: string, City: string, State: string, StateFull: string, ZipCode: string, Country: string, CountryFull: string, Birthday: datetime, Age: int, Occupation: string, Company: string, Vehicle: string, Latitude: real, Longitude: real, Continent: string),
        Data_Date (Date: datetime, DateKey: int, Year: int, ['Year Quarter']: string, ['Year Quarter Number']: int, Quarter: string, ['Year Month']: string, ['Year Month Short']: string, ['Year Month Number']: int, Month: string, ['Month Short']: string, ['Month Number']: int, ['Day of Week']: string, ['Day of Week Short']: string, ['Day of Week Number']: int, ['Working Day']: bool, ['Working Day Number']: int),
        Data_GeoLocations (GeoLocationKey: int, CountryCode: string, Country: string, StateCode: string, State: string, NumCustomers: int),
        Data_OrderRows (OrderKey: long, ['Line Number']: int, ProductKey: int, Quantity: int, ['Unit Price']: decimal, ['Net Price']: decimal, ['Unit Cost']: decimal),
        Data_Orders (OrderKey: long, CustomerKey: int, StoreKey: int, ['Order Date']: datetime, ['Delivery Date']: datetime, ['Currency Code']: string),
        Data_Product (ProductKey: int, ['Product Code']: string, ['Product Name']: string, Manufacturer: string, Brand: string, Color: string, ['Weight Unit Measure']: string, Weight: real, ['Unit Cost']: decimal, ['Unit Price']: decimal, ['Subcategory Code']: string, Subcategory: string, ['Category Code']: string, Category: string),
        Data_Store (StoreKey: int, ['Store Code']: int, Country: string, State: string, Name: string, ['Square Meters']: int, ['Open Date']: datetime, ['Close Date']: datetime, Status: string)
.drop functions (['Currency Exchange'], Customer, Date, Product, Sales, Store) ifexists
.create function ['Currency Exchange']() {Data_CurrencyExchange | project Date, FromCurrency, ToCurrency, Exchange}
.create function Customer() {Data_Customer | project CustomerKey, Gender, Name = strcat(GivenName, ' ', Surname), Address = StreetAddress, City, ['State Code'] = State, State = StateFull, ['Zip Code'] = ZipCode, ['Country Code'] = Country, Country = CountryFull, Continent, Age}
.create function Date() {Data_Date | project Date, Year, ['Year Quarter'], ['Year Quarter Number'], Quarter, ['Year Month'], ['Year Month Short'], ['Year Month Number'], Month, ['Month Short'], ['Month Number'], ['Day of Week'], ['Day of Week Short'], ['Day of Week Number'], ['Working Day'], ['Working Day Number']}
.create function Product() {Data_Product | project ProductKey, ['Product Code'], ['Product Name'], Manufacturer, Brand, Color, ['Weight Unit Measure'], Weight, ['Unit Cost'], ['Unit Price'], ['Subcategory Code'], Subcategory, ['Category Code'], Category}
.create function Sales() {Data_Orders | join kind=leftouter Data_OrderRows on OrderKey | join kind=leftouter (Data_CurrencyExchange | where FromCurrency == 'USD') on $left.['Order Date'] == $right.Date, $left.['Currency Code'] == $right.ToCurrency | project ['Order Number'] = OrderKey, ['Line Number'], ['Order Date'], ['Delivery Date'], CustomerKey, StoreKey, ProductKey, Quantity, ['Unit Price'], ['Net Price'], ['Unit Cost'], ['Currency Code'], ['Exchange Rate'] = Exchange}
.create function Store() {Data_Store | project StoreKey, ['Store Code'], Country, State, Name, ['Square Meters'], ['Open Date'], ['Close Date'], Status}
.create function ['Currency Exchange Perpetual']() {let dayOffset = datetime_diff('day', now(), make_datetime(2020,3,3)); Data_CurrencyExchange | project Date = datetime_add('day', dayOffset, Date), FromCurrency, ToCurrency, Exchange}
.create function ['Customer Perpetual']() {Data_Customer | project CustomerKey, Gender, Name = strcat(GivenName, ' ', Surname), Address = StreetAddress, City, ['State Code'] = State, State = StateFull, ['Zip Code'] = ZipCode, ['Country Code'] = Country, Country = CountryFull, Continent, Birthday, Age}
.create function ['Date Perpetual']() {let yearOffset = datetime_diff('year', now(), make_datetime(2020, 3, 3)); Data_Date | project Date = datetime_add('year', yearOffset, Date), Year = Year + yearOffset, ['Year Quarter'] = strcat(Quarter, '-', tostring(Year + yearOffset)), ['Year Quarter Number'], Quarter, ['Year Month'] = strcat(['Month Short'], ' ', tostring(Year + yearOffset)), ['Year Month Number'], Month = ['Month Short'], ['Month Number'], ['Day of Week'] = case( dayofweek(datetime_add('year', yearOffset, Date)) <= 0d, 'Sun', dayofweek(datetime_add('year', yearOffset, Date)) <= 1d, 'Mon', dayofweek(datetime_add('year', yearOffset, Date)) <= 2d, 'Tue', dayofweek(datetime_add('year', yearOffset, Date)) <= 3d, 'Wed', dayofweek(datetime_add('year', yearOffset, Date)) <= 4d, 'Thu', dayofweek(datetime_add('year', yearOffset, Date)) <= 5d, 'Fri', dayofweek(datetime_add('year', yearOffset, Date)) <= 6d, 'Sat', '' ) , ['Day of Week Number'] = dayofweek(datetime_add('year', yearOffset, Date)) / 1d}
.create function ['Product Perpetual']() {Data_Product | project ProductKey, ['Product Code'], ['Product Name'], Manufacturer, Brand, Color, ['Weight Unit Measure'], Weight, ['Unit Cost'], ['Unit Price'], ['Subcategory Code'], Subcategory, ['Category Code'], Category}
.create function ['Sales Perpetual']() {let dayOffset = datetime_diff('day', now(), make_datetime(2020,3,3)); Data_Orders | join kind=leftouter Data_OrderRows on OrderKey | join kind=leftouter (Data_CurrencyExchange | where FromCurrency == 'USD') on $left.['Order Date'] == $right.Date, $left.['Currency Code'] == $right.ToCurrency | project ['Order Number'] = OrderKey, ['Line Number'], ['Order Date'] = datetime_add('day', dayOffset, ['Order Date']), ['Delivery Date'] = datetime_add('day', dayOffset, ['Delivery Date']), CustomerKey, StoreKey, ProductKey, Quantity, ['Unit Price'], ['Net Price'], ['Unit Cost'], ['Currency Code'], ['Exchange Rate'] = Exchange}
.create function ['Store Perpetual']() {let yearOffset = datetime_diff('year', now(), make_datetime(2020,3,3)); Data_Store | project StoreKey, ['Store Code'], Country, State, Name, ['Square Meters'], ['Open Date'] = datetime_add('year', yearOffset, ['Open Date']), ['Close Date'] = datetime_add('year', yearOffset, ['Close Date']), Status}
.ingest into table Data_CurrencyExchange (h'https://depict.tiny.us/2p8hf7bs/Data_CurrencyExchange_1.parquet') with (format="parquet")
.ingest into table Data_Customer (h'https://depict.tiny.us/2p8hf7bs/Data_Customer_1.parquet') with (format="parquet")
.ingest into table Data_Date (h'https://depict.tiny.us/2p8hf7bs/Data_Date_1.parquet') with (format="parquet")
.ingest into table Data_GeoLocations (h'https://depict.tiny.us/2p8hf7bs/Data_GeoLocations_1.parquet') with (format="parquet")
.ingest into table Data_Product (h'https://depict.tiny.us/2p8hf7bs/Data_Product_1.parquet') with (format="parquet")
.ingest into table Data_Store (h'https://depict.tiny.us/2p8hf7bs/Data_Store_1.parquet') with (format="parquet")
.ingest into table Data_OrderRows (h'https://depict.tiny.us/2p8hf7bs/Data_OrderRows_1.parquet') with (format="parquet")
.ingest into table Data_OrderRows (h'https://depict.tiny.us/2p8hf7bs/Data_OrderRows_2.parquet') with (format="parquet")
.ingest into table Data_OrderRows (h'https://depict.tiny.us/2p8hf7bs/Data_OrderRows_3.parquet') with (format="parquet")
.ingest into table Data_OrderRows (h'https://depict.tiny.us/2p8hf7bs/Data_OrderRows_4.parquet') with (format="parquet")
.ingest into table Data_OrderRows (h'https://depict.tiny.us/2p8hf7bs/Data_OrderRows_5.parquet') with (format="parquet")
.ingest into table Data_OrderRows (h'https://depict.tiny.us/2p8hf7bs/Data_OrderRows_6.parquet') with (format="parquet")
.ingest into table Data_OrderRows (h'https://depict.tiny.us/2p8hf7bs/Data_OrderRows_7.parquet') with (format="parquet")
.ingest into table Data_OrderRows (h'https://depict.tiny.us/2p8hf7bs/Data_OrderRows_8.parquet') with (format="parquet")
.ingest into table Data_OrderRows (h'https://depict.tiny.us/2p8hf7bs/Data_OrderRows_9.parquet') with (format="parquet")
.ingest into table Data_OrderRows (h'https://depict.tiny.us/2p8hf7bs/Data_OrderRows_10.parquet') with (format="parquet")
.ingest into table Data_OrderRows (h'https://depict.tiny.us/2p8hf7bs/Data_OrderRows_11.parquet') with (format="parquet")
.ingest into table Data_OrderRows (h'https://depict.tiny.us/2p8hf7bs/Data_OrderRows_12.parquet') with (format="parquet")
.ingest into table Data_OrderRows (h'https://depict.tiny.us/2p8hf7bs/Data_OrderRows_13.parquet') with (format="parquet")
.ingest into table Data_OrderRows (h'https://depict.tiny.us/2p8hf7bs/Data_OrderRows_14.parquet') with (format="parquet")
.ingest into table Data_OrderRows (h'https://depict.tiny.us/2p8hf7bs/Data_OrderRows_15.parquet') with (format="parquet")
.ingest into table Data_OrderRows (h'https://depict.tiny.us/2p8hf7bs/Data_OrderRows_16.parquet') with (format="parquet")
.ingest into table Data_OrderRows (h'https://depict.tiny.us/2p8hf7bs/Data_OrderRows_17.parquet') with (format="parquet")
.ingest into table Data_OrderRows (h'https://depict.tiny.us/2p8hf7bs/Data_OrderRows_18.parquet') with (format="parquet")
.ingest into table Data_OrderRows (h'https://depict.tiny.us/2p8hf7bs/Data_OrderRows_19.parquet') with (format="parquet")
.ingest into table Data_Orders (h'https://depict.tiny.us/2p8hf7bs/Data_Orders_1.parquet') with (format="parquet")
.ingest into table Data_Orders (h'https://depict.tiny.us/2p8hf7bs/Data_Orders_2.parquet') with (format="parquet")
.ingest into table Data_Orders (h'https://depict.tiny.us/2p8hf7bs/Data_Orders_3.parquet') with (format="parquet")
.ingest into table Data_Orders (h'https://depict.tiny.us/2p8hf7bs/Data_Orders_4.parquet') with (format="parquet")
.ingest into table Data_Orders (h'https://depict.tiny.us/2p8hf7bs/Data_Orders_5.parquet') with (format="parquet")
.ingest into table Data_Orders (h'https://depict.tiny.us/2p8hf7bs/Data_Orders_6.parquet') with (format="parquet")
.ingest into table Data_Orders (h'https://depict.tiny.us/2p8hf7bs/Data_Orders_7.parquet') with (format="parquet")
.ingest into table Data_Orders (h'https://depict.tiny.us/2p8hf7bs/Data_Orders_8.parquet') with (format="parquet")